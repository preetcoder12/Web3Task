{"ast":null,"code":"var _jsxFileName = \"/home/preet/Downloads/web3task/Web3Task/Frontend/websocket-client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport useWebSocket from './UseWebSocket'; // Ensure correct path\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WEBSOCKET_URL = 'ws://localhost:8080';\nfunction App() {\n  _s();\n  const {\n    isConnected,\n    sendMessage\n  } = useWebSocket(WEBSOCKET_URL);\n  const canvasRef = useRef(null);\n  const animationFrameIdRef = useRef(null); // To store requestAnimationFrame ID\n  const [isAnimationRunning, setIsAnimationRunning] = useState(false);\n  const [showText, setShowText] = useState(false); // For \"Apple Intelligence\" text\n\n  // Animation parameters (can be adjusted for speed/style)\n  const animProps = useRef({\n    progress: 0,\n    // 0 to 1, overall animation progress within a cycle\n    cycleDuration: 2500,\n    // ms per animation cycle (grow and fade)\n    lineHeight: 10,\n    // Max height of the gradient line\n    fadeHeight: 50,\n    // How much vertical space the fade takes\n    textAppearDelay: 1000 // ms after start to show text\n  });\n  const gradientColors = [{\n    stop: 0,\n    color: '#ee9ca7'\n  },\n  // Light red\n  {\n    stop: 0.1,\n    color: '#ffdde1'\n  },\n  // Pink\n  {\n    stop: 0.3,\n    color: '#c33764'\n  },\n  // Darker pink\n  {\n    stop: 0.5,\n    color: '#1d2671'\n  },\n  // Dark blue\n  {\n    stop: 0.7,\n    color: '#ff00cc'\n  },\n  // Bright pink/magenta\n  {\n    stop: 0.9,\n    color: '#9933cc'\n  },\n  // Purple\n  {\n    stop: 1,\n    color: '#663399'\n  } // Darker purple\n  ];\n\n  // Drawing function for the gradient bar\n  const drawAnimation = useCallback(timestamp => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    const {\n      width,\n      height\n    } = canvas;\n    const {\n      progress,\n      cycleDuration,\n      lineHeight,\n      fadeHeight\n    } = animProps.current;\n    ctx.clearRect(0, 0, width, height); // Clear canvas for next frame\n\n    // Calculate current expansion width (0 to full width)\n    const currentExpansionWidth = Math.min(progress * width * 1.5, width); // Over-expand slightly for effect\n    const startX = (width - currentExpansionWidth) / 2;\n    const endX = startX + currentExpansionWidth;\n\n    // Create a horizontal gradient for the color of the bar\n    const lineGradient = ctx.createLinearGradient(0, 0, width, 0);\n    gradientColors.forEach(gc => {\n      lineGradient.addColorStop(gc.stop, gc.color);\n    });\n\n    // Draw the main expanding line\n    ctx.beginPath();\n    ctx.rect(startX, height / 2 - lineHeight / 2, currentExpansionWidth, lineHeight);\n    ctx.fillStyle = lineGradient;\n    ctx.fill();\n    ctx.closePath();\n\n    // Now, create the \"wave\" or \"disappearing from bottom to up\" effect\n    // This is more complex. We can use a mask or draw segments.\n    // For simplicity with Canvas, let's try drawing a transparent gradient over it\n    // or manipulate alpha for segments.\n\n    // A simpler way to simulate \"fade from bottom up\" on a horizontal line:\n    // Draw the line, then draw a gradient mask over it.\n    // Or, draw many small vertical lines, and adjust their heights.\n\n    // Let's try drawing segments to simulate the wave more precisely:\n    const segmentCount = 200; // Number of vertical segments\n    for (let i = 0; i < segmentCount; i++) {\n      const segmentX = startX + i / segmentCount * currentExpansionWidth;\n      const segmentWidth = currentExpansionWidth / segmentCount;\n\n      // Calculate a wave function for segment height/opacity\n      // The wave should peak at the center and drop off towards ends\n      const normalizedX = (segmentX - startX) / currentExpansionWidth; // 0 to 1 across the bar\n      const waveAmplitude = Math.sin(normalizedX * Math.PI) * lineHeight; // Simple sine wave for height\n\n      // Introduce time-based wave/dissolve\n      // The 'progress' value here can define how much of the bar is \"dissolving\"\n      // Let's make it such that as progress increases, the wave moves outwards\n      const dissolveFactor = Math.abs(normalizedX * 2 - 1); // 1 at ends, 0 at center\n      const currentHeight = lineHeight - (progress > 0.5 ? (progress - 0.5) * 2 : 0) * lineHeight * dissolveFactor * 2;\n      const currentOpacity = 1 - (progress > 0.5 ? (progress - 0.5) * 2 : 0) * dissolveFactor;\n\n      // The video shows the gradient bar itself changing its bottom edge,\n      // which is hard with a single rect. A path or individual segments are better.\n      // Let's stick to a simpler \"glow\" that expands and fades.\n\n      // For the glowing effect, draw a blurred version beneath the main line\n      if (currentExpansionWidth > 0 && progress < 0.9) {\n        // Only show glow when expanding\n        ctx.filter = 'blur(8px)'; // Apply blur\n        ctx.globalAlpha = 0.5; // Make it semi-transparent\n        ctx.beginPath();\n        ctx.rect(startX, height / 2 - lineHeight / 2, currentExpansionWidth, lineHeight);\n        ctx.fillStyle = lineGradient;\n        ctx.fill();\n        ctx.closePath();\n        ctx.filter = 'none'; // Reset filter\n        ctx.globalAlpha = 1; // Reset alpha\n      }\n    }\n\n    // Update animation progress for the next frame\n    if (isAnimationRunning) {\n      animProps.current.progress = (animProps.current.progress + (timestamp - (animProps.current.lastTimestamp || timestamp)) / cycleDuration) % 1;\n      animProps.current.lastTimestamp = timestamp;\n      animationFrameIdRef.current = requestAnimationFrame(drawAnimation);\n\n      // Show text after delay on first loop\n      if (animProps.current.progress * cycleDuration >= animProps.current.textAppearDelay && !showText) {\n        setShowText(true);\n      }\n    }\n  }, [isAnimationRunning, gradientColors, showText]);\n\n  // Handle start/stop logic\n  useEffect(() => {\n    if (isAnimationRunning) {\n      setShowText(false); // Hide text initially when starting new animation\n      animProps.current.progress = 0; // Reset progress\n      animProps.current.lastTimestamp = performance.now(); // Initialize timestamp\n      animationFrameIdRef.current = requestAnimationFrame(drawAnimation);\n    } else {\n      if (animationFrameIdRef.current) {\n        cancelAnimationFrame(animationFrameIdRef.current);\n        animationFrameIdRef.current = null;\n      }\n      // Optionally hide text immediately on stop or fade out\n      // setShowText(false);\n    }\n    return () => {\n      if (animationFrameIdRef.current) {\n        cancelAnimationFrame(animationFrameIdRef.current);\n      }\n    };\n  }, [isAnimationRunning, drawAnimation]);\n  const handleStartAnimation = () => {\n    if (isConnected) {\n      sendMessage({\n        type: 'START_ANIMATION'\n      });\n      setIsAnimationRunning(true);\n    } else {\n      alert('Not connected to WebSocket server.');\n    }\n  };\n  const handleStopAnimation = () => {\n    if (isConnected) {\n      sendMessage({\n        type: 'STOP_ANIMATION'\n      });\n      setIsAnimationRunning(false);\n      setShowText(false); // Hide text on stop\n    }\n  };\n\n  // Resize canvas when window size changes\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const setCanvasDimensions = () => {\n      const container = canvas.parentElement;\n      canvas.width = container.clientWidth;\n      canvas.height = container.clientHeight;\n    };\n    setCanvasDimensions();\n    window.addEventListener('resize', setCanvasDimensions);\n    return () => window.removeEventListener('resize', setCanvasDimensions);\n  }, []); // Run once on mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"animation-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: `animation-text ${showText ? 'show-text' : ''}`,\n        children: \"Apple Intelligence\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleStartAnimation,\n        disabled: !isConnected || isAnimationRunning,\n        children: \"Start Animation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleStopAnimation,\n        disabled: !isConnected || !isAnimationRunning,\n        children: \"Stop Animation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"connection-status\",\n      children: [\"Connection Status: \", isConnected ? 'Connected' : 'Disconnected']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"lm7ZjwjZvjWqhpLDw5peaMt469g=\", false, function () {\n  return [useWebSocket];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","useWebSocket","jsxDEV","_jsxDEV","WEBSOCKET_URL","App","_s","isConnected","sendMessage","canvasRef","animationFrameIdRef","isAnimationRunning","setIsAnimationRunning","showText","setShowText","animProps","progress","cycleDuration","lineHeight","fadeHeight","textAppearDelay","gradientColors","stop","color","drawAnimation","timestamp","canvas","current","ctx","getContext","width","height","clearRect","currentExpansionWidth","Math","min","startX","endX","lineGradient","createLinearGradient","forEach","gc","addColorStop","beginPath","rect","fillStyle","fill","closePath","segmentCount","i","segmentX","segmentWidth","normalizedX","waveAmplitude","sin","PI","dissolveFactor","abs","currentHeight","currentOpacity","filter","globalAlpha","lastTimestamp","requestAnimationFrame","performance","now","cancelAnimationFrame","handleStartAnimation","type","alert","handleStopAnimation","setCanvasDimensions","container","parentElement","clientWidth","clientHeight","window","addEventListener","removeEventListener","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["/home/preet/Downloads/web3task/Web3Task/Frontend/websocket-client/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport useWebSocket from './UseWebSocket'; // Ensure correct path\nimport './App.css';\n\nconst WEBSOCKET_URL = 'ws://localhost:8080';\n\nfunction App() {\n  const { isConnected, sendMessage } = useWebSocket(WEBSOCKET_URL);\n  const canvasRef = useRef(null);\n  const animationFrameIdRef = useRef(null); // To store requestAnimationFrame ID\n  const [isAnimationRunning, setIsAnimationRunning] = useState(false);\n  const [showText, setShowText] = useState(false); // For \"Apple Intelligence\" text\n\n  // Animation parameters (can be adjusted for speed/style)\n  const animProps = useRef({\n    progress: 0, // 0 to 1, overall animation progress within a cycle\n    cycleDuration: 2500, // ms per animation cycle (grow and fade)\n    lineHeight: 10, // Max height of the gradient line\n    fadeHeight: 50, // How much vertical space the fade takes\n    textAppearDelay: 1000, // ms after start to show text\n  });\n\n  const gradientColors = [\n    { stop: 0, color: '#ee9ca7' }, // Light red\n    { stop: 0.1, color: '#ffdde1' }, // Pink\n    { stop: 0.3, color: '#c33764' }, // Darker pink\n    { stop: 0.5, color: '#1d2671' }, // Dark blue\n    { stop: 0.7, color: '#ff00cc' }, // Bright pink/magenta\n    { stop: 0.9, color: '#9933cc' }, // Purple\n    { stop: 1, color: '#663399' }   // Darker purple\n  ];\n\n  // Drawing function for the gradient bar\n  const drawAnimation = useCallback((timestamp) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    const { width, height } = canvas;\n    const { progress, cycleDuration, lineHeight, fadeHeight } = animProps.current;\n\n    ctx.clearRect(0, 0, width, height); // Clear canvas for next frame\n\n    // Calculate current expansion width (0 to full width)\n    const currentExpansionWidth = Math.min(progress * width * 1.5, width); // Over-expand slightly for effect\n    const startX = (width - currentExpansionWidth) / 2;\n    const endX = startX + currentExpansionWidth;\n\n    // Create a horizontal gradient for the color of the bar\n    const lineGradient = ctx.createLinearGradient(0, 0, width, 0);\n    gradientColors.forEach(gc => {\n      lineGradient.addColorStop(gc.stop, gc.color);\n    });\n\n    // Draw the main expanding line\n    ctx.beginPath();\n    ctx.rect(startX, height / 2 - lineHeight / 2, currentExpansionWidth, lineHeight);\n    ctx.fillStyle = lineGradient;\n    ctx.fill();\n    ctx.closePath();\n\n    // Now, create the \"wave\" or \"disappearing from bottom to up\" effect\n    // This is more complex. We can use a mask or draw segments.\n    // For simplicity with Canvas, let's try drawing a transparent gradient over it\n    // or manipulate alpha for segments.\n\n    // A simpler way to simulate \"fade from bottom up\" on a horizontal line:\n    // Draw the line, then draw a gradient mask over it.\n    // Or, draw many small vertical lines, and adjust their heights.\n\n    // Let's try drawing segments to simulate the wave more precisely:\n    const segmentCount = 200; // Number of vertical segments\n    for (let i = 0; i < segmentCount; i++) {\n      const segmentX = startX + (i / segmentCount) * currentExpansionWidth;\n      const segmentWidth = currentExpansionWidth / segmentCount;\n\n      // Calculate a wave function for segment height/opacity\n      // The wave should peak at the center and drop off towards ends\n      const normalizedX = (segmentX - startX) / currentExpansionWidth; // 0 to 1 across the bar\n      const waveAmplitude = Math.sin(normalizedX * Math.PI) * lineHeight; // Simple sine wave for height\n      \n      // Introduce time-based wave/dissolve\n      // The 'progress' value here can define how much of the bar is \"dissolving\"\n      // Let's make it such that as progress increases, the wave moves outwards\n      const dissolveFactor = Math.abs(normalizedX * 2 - 1); // 1 at ends, 0 at center\n      const currentHeight = lineHeight - (progress > 0.5 ? (progress - 0.5) * 2 : 0) * lineHeight * dissolveFactor * 2;\n      const currentOpacity = 1 - (progress > 0.5 ? (progress - 0.5) * 2 : 0) * dissolveFactor;\n\n\n      // The video shows the gradient bar itself changing its bottom edge,\n      // which is hard with a single rect. A path or individual segments are better.\n      // Let's stick to a simpler \"glow\" that expands and fades.\n\n      // For the glowing effect, draw a blurred version beneath the main line\n      if (currentExpansionWidth > 0 && progress < 0.9) { // Only show glow when expanding\n          ctx.filter = 'blur(8px)'; // Apply blur\n          ctx.globalAlpha = 0.5; // Make it semi-transparent\n          ctx.beginPath();\n          ctx.rect(startX, height / 2 - lineHeight / 2, currentExpansionWidth, lineHeight);\n          ctx.fillStyle = lineGradient;\n          ctx.fill();\n          ctx.closePath();\n          ctx.filter = 'none'; // Reset filter\n          ctx.globalAlpha = 1; // Reset alpha\n      }\n    }\n\n    // Update animation progress for the next frame\n    if (isAnimationRunning) {\n      animProps.current.progress = (animProps.current.progress + (timestamp - (animProps.current.lastTimestamp || timestamp)) / cycleDuration) % 1;\n      animProps.current.lastTimestamp = timestamp;\n      animationFrameIdRef.current = requestAnimationFrame(drawAnimation);\n\n      // Show text after delay on first loop\n      if (animProps.current.progress * cycleDuration >= animProps.current.textAppearDelay && !showText) {\n          setShowText(true);\n      }\n    }\n  }, [isAnimationRunning, gradientColors, showText]);\n\n  // Handle start/stop logic\n  useEffect(() => {\n    if (isAnimationRunning) {\n      setShowText(false); // Hide text initially when starting new animation\n      animProps.current.progress = 0; // Reset progress\n      animProps.current.lastTimestamp = performance.now(); // Initialize timestamp\n      animationFrameIdRef.current = requestAnimationFrame(drawAnimation);\n    } else {\n      if (animationFrameIdRef.current) {\n        cancelAnimationFrame(animationFrameIdRef.current);\n        animationFrameIdRef.current = null;\n      }\n      // Optionally hide text immediately on stop or fade out\n      // setShowText(false);\n    }\n\n    return () => {\n      if (animationFrameIdRef.current) {\n        cancelAnimationFrame(animationFrameIdRef.current);\n      }\n    };\n  }, [isAnimationRunning, drawAnimation]);\n\n  const handleStartAnimation = () => {\n    if (isConnected) {\n      sendMessage({ type: 'START_ANIMATION' });\n      setIsAnimationRunning(true);\n    } else {\n      alert('Not connected to WebSocket server.');\n    }\n  };\n\n  const handleStopAnimation = () => {\n    if (isConnected) {\n      sendMessage({ type: 'STOP_ANIMATION' });\n      setIsAnimationRunning(false);\n      setShowText(false); // Hide text on stop\n    }\n  };\n\n  // Resize canvas when window size changes\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const setCanvasDimensions = () => {\n      const container = canvas.parentElement;\n      canvas.width = container.clientWidth;\n      canvas.height = container.clientHeight;\n    };\n\n    setCanvasDimensions();\n    window.addEventListener('resize', setCanvasDimensions);\n\n    return () => window.removeEventListener('resize', setCanvasDimensions);\n  }, []); // Run once on mount\n\n  return (\n    <div className=\"App\">\n      <div className=\"animation-container\">\n        <canvas ref={canvasRef}></canvas>\n        <h2 className={`animation-text ${showText ? 'show-text' : ''}`}>\n          Apple Intelligence\n        </h2>\n      </div>\n\n      <div className=\"controls\">\n        <button onClick={handleStartAnimation} disabled={!isConnected || isAnimationRunning}>\n          Start Animation\n        </button>\n        <button onClick={handleStopAnimation} disabled={!isConnected || !isAnimationRunning}>\n          Stop Animation\n        </button>\n      </div>\n\n      <p className=\"connection-status\">Connection Status: {isConnected ? 'Connected' : 'Disconnected'}</p>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}