{"ast":null,"code":"var _jsxFileName = \"/home/preet/Downloads/web3task/Web3Task/Frontend/websocket-client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport useWebSocket from './UseWebSocket';\nimport './App.css'; // For basic styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WEBSOCKET_URL = 'ws://localhost:8080'; // Adjust if your server runs on a different port\n\nfunction App() {\n  _s();\n  const {\n    isConnected,\n    lastMessage,\n    error,\n    sendMessage\n  } = useWebSocket(WEBSOCKET_URL);\n  const [animationData, setAnimationData] = useState({});\n  const [isAnimationRunning, setIsAnimationRunning] = useState(false);\n  useEffect(() => {\n    if (lastMessage && isAnimationRunning) {\n      // Assuming 'lastMessage' contains animation frame data\n      setAnimationData(lastMessage);\n    }\n  }, [lastMessage, isAnimationRunning]);\n  const handleStartAnimation = () => {\n    if (isConnected) {\n      sendMessage({\n        type: 'START_ANIMATION'\n      });\n      setIsAnimationRunning(true);\n    } else {\n      alert('Not connected to WebSocket server.');\n    }\n  };\n  const handleStopAnimation = () => {\n    if (isConnected) {\n      sendMessage({\n        type: 'STOP_ANIMATION'\n      });\n      setIsAnimationRunning(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Real-time Animation System\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Connection Status: \", isConnected ? 'Connected' : `Disconnected (${error || 'Unknown error'})`]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleStartAnimation,\n        disabled: !isConnected || isAnimationRunning,\n        children: \"Start Animation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleStopAnimation,\n        disabled: !isConnected || !isAnimationRunning,\n        children: \"Stop Animation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"animation-display\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Animation Output:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(animationData, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), Object.keys(animationData).length > 0 && isAnimationRunning && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"animated-element\",\n        style: {\n          left: `${animationData.x || 0}px`,\n          top: `${animationData.y || 0}px`,\n          backgroundColor: animationData.color || 'blue',\n          transform: `scale(${animationData.scale || 1})`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"YuzYgIMIMkcbj5Ms5ovrvFzSs2Q=\", false, function () {\n  return [useWebSocket];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useWebSocket","jsxDEV","_jsxDEV","WEBSOCKET_URL","App","_s","isConnected","lastMessage","error","sendMessage","animationData","setAnimationData","isAnimationRunning","setIsAnimationRunning","handleStartAnimation","type","alert","handleStopAnimation","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","JSON","stringify","Object","keys","length","style","left","x","top","y","backgroundColor","color","transform","scale","_c","$RefreshReg$"],"sources":["/home/preet/Downloads/web3task/Web3Task/Frontend/websocket-client/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport useWebSocket from './UseWebSocket';\nimport './App.css'; // For basic styling\n\nconst WEBSOCKET_URL = 'ws://localhost:8080'; // Adjust if your server runs on a different port\n\nfunction App() {\n  const { isConnected, lastMessage, error, sendMessage } = useWebSocket(WEBSOCKET_URL);\n  const [animationData, setAnimationData] = useState({});\n  const [isAnimationRunning, setIsAnimationRunning] = useState(false);\n\n  useEffect(() => {\n    if (lastMessage && isAnimationRunning) {\n      // Assuming 'lastMessage' contains animation frame data\n      setAnimationData(lastMessage);\n    }\n  }, [lastMessage, isAnimationRunning]);\n\n  const handleStartAnimation = () => {\n    if (isConnected) {\n      sendMessage({ type: 'START_ANIMATION' });\n      setIsAnimationRunning(true);\n    } else {\n      alert('Not connected to WebSocket server.');\n    }\n  };\n\n  const handleStopAnimation = () => {\n    if (isConnected) {\n      sendMessage({ type: 'STOP_ANIMATION' });\n      setIsAnimationRunning(false);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Real-time Animation System</h1>\n      <p>Connection Status: {isConnected ? 'Connected' : `Disconnected (${error || 'Unknown error'})`}</p>\n\n      <div className=\"controls\">\n        <button onClick={handleStartAnimation} disabled={!isConnected || isAnimationRunning}>\n          Start Animation\n        </button>\n        <button onClick={handleStopAnimation} disabled={!isConnected || !isAnimationRunning}>\n          Stop Animation\n        </button>\n      </div>\n\n      <div className=\"animation-display\">\n        <h2>Animation Output:</h2>\n        {/*\n          This is a very basic way to display animation data.\n          For real animations, you'd render SVG, Canvas, or manipulate DOM elements\n          based on the 'animationData' received.\n        */}\n        <pre>{JSON.stringify(animationData, null, 2)}</pre>\n        {Object.keys(animationData).length > 0 && isAnimationRunning && (\n          <div\n            className=\"animated-element\"\n            style={{\n              left: `${animationData.x || 0}px`,\n              top: `${animationData.y || 0}px`,\n              backgroundColor: animationData.color || 'blue',\n              transform: `scale(${animationData.scale || 1})`,\n            }}\n          ></div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}